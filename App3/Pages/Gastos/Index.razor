@page "/gastos"
@attribute [Authorize]

<PageTitle>Gastos</PageTitle>

<div class="d-flex">

    <h1 class='flex-grow-1'>
        <i class="bi bi-coin"></i>
        Gastos
    </h1>

    <div>
        <a class="btn btn-primary" href="/gastos/form">
            <i class="bi bi-plus"></i> Añadir
        </a>
    </div>

</div>
<hr>

<form class="row mb-4">

    <div class="mb-2 col-md-4">
        <InputSelect class="form-select" @bind-Value="CategoriaId" @bind-Value:after="FiltrarGastos">
            <option value="0">Categorias</option>

            @if (listaCategorias is not null)
            {
                @foreach (var item in listaCategorias)
                {
                    <option value="@item.Id">@item.Nombre</option>
                }
            }
        </InputSelect>
    </div>

    <div class="mb-2 col-md-8">

        <div class="d-flex">

            <div class="flex-grow-1">
                <InputDate Type="InputDateType.Month" class="form-control" @bind-Value="MesAno"
                    @bind-Value:after="BuscarGastosDoMes" />
            </div>

        </div>

    </div>

</form>

@if (gastosFiltrados is null)
{
    <Loading />
}
else
{

    <div class="list-group">
        @foreach (var item in gastosFiltrados)
        {
            <a class="list-group-item list-group-item-action d-flex" href="/gastos/form/@item.Id">
                <span class='flex-grow-1'>
                    @item.Fecha.ToShortDateString() - @item.CategoriaNome @item.Nombre
                </span>
                <span>
                    R$ @item.Valor.ToString("N2")
                </span>
            </a>
        }

        <a class="list-group-item list-group-item-action d-flex" href="#">
            <span class='flex-grow-1'>
                Total
            </span>
            <span>
                R$ @gastosFiltrados.Sum(s => s.Valor).ToString("N2")
            </span>
        </a>

    </div>

}

@code {
    List<Gasto> listaGastos;
    List<Categoria> listaCategorias;
    List<Gasto> gastosFiltrados;

    int CategoriaId { get; set; }
    DateTime MesAno { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        listaCategorias = await _categoriasService.ListAll();
        await BuscarGastosDoMes();
    }
    public async Task BuscarGastosDoMes()
    {
        gastosFiltrados = null;
        listaGastos = await _gastosService.ListAll(MesAno);
        FiltrarGastos();
    }

    public void FiltrarGastos()
    {
        gastosFiltrados = listaGastos;

        if (CategoriaId > 0)
            gastosFiltrados = listaGastos.Where(w => w.CategoriaId == CategoriaId).ToList();
            
    }

}
