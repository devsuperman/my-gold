@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication.Cookies

@rendermode InteractiveServer

@inject ILogger<Login> Logger

<PageTitle>Identifique-se</PageTitle>

<h1>Identifique-se</h1>
<div class="row">
    <div class="col-md-12">
        <section>

            <EditForm Model="Model" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Model.Contrasena" class="form-control"
                               autocomplete="current-password" placeholder="contraseña" />
                    <label for="password" class="form-label">Contraseña</label>
                    <ValidationMessage For="() => Model.Contrasena" class="text-danger" />
                    <span class="text-danger">@Model.ErrorMessage</span>
                </div>

                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Entrar</button>
                </div>
            </EditForm>
        </section>
    </div>

</div>

@code {
    
    [SupplyParameterFromForm]
    private LoginModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("INICIOU");        
    }

    public async Task LoginUser()
    {
        Logger.LogDebug("LOGIN");

        if (Model.Contrasena == "8318")
        {
            if (!string.IsNullOrEmpty(ReturnUrl))
                _navigation.NavigateTo(ReturnUrl);

            _navigation.NavigateTo("/");
        }
        else
        {
            Model.ErrorMessage = "Senha incorreta";
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "Senha Incorreta")]
        [DataType(DataType.Password)]
        public string Contrasena { get; set; } = string.Empty;

        public string ErrorMessage { get; set; } = string.Empty;
    }
}
