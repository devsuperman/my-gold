@page "/categorias/edit/{Id:int}"

<PageTitle>
    Editar Categoria @Id
</PageTitle>

<h1>
    <i class="bi bi-list-task"></i>
    Editar Categoria @Id
</h1>

<hr />

@if (Categoria is null)
{
    <p>
        <i class="bi bi-cloud-arrow-down"></i>
        Carregando...
    </p>
}
else
{
    <EditForm method="post" Model="Categoria" OnValidSubmit="UpdateCategoria" FormName="edit" Enhance>

        <ValidationSummary />
        <DataAnnotationsValidator />

        <input type="hidden" name="Categoria.Id" value="@Id" />

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" @bind-Value="Categoria.Nombre" class="form-control" />
            <ValidationMessage For="() => Categoria.Nombre" class="text-danger" />
        </div>

        <div class="d-flex justify-content-end">

            <a href="/categorias" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i>
                Voltar
            </a>

            <button type="submit" class="btn btn-primary ms-2">
                <i class="bi bi-check-circle"></i>
                Salvar Categoria
            </button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Categoria? Categoria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categoria ??= await _categoriasRepository.Get(Id);
    }

    public async Task UpdateCategoria()
    {
        await _categoriasRepository.Upsert(Categoria);
        _navigation.NavigateTo("/categorias");
    }
}
